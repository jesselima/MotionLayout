<resources>
    <string name="app_name">Motion Layout</string>
    <string name="red_star">Red Star</string>
    <string name="hello_world">Hello World</string>
    <string name="long_text">MotionLayout can be used to build rich animations when used with CoordinatorLayout. In this sample you can see a collapsible header using MotionLayout. \n\nMotionLayout is intended to move, resize, and animate UI elements with which users interact, such as buttons and title bars. Motion in your app should not be simply a gratuitous special effect in your application. It should be used to help users understand what your application is doing. For more information on designing your app with motion, see the Material Design section on Understanding motion.an  layout defines the structure for a user interface in your app, such as in an activity. All elements in the layout are built using a hierarchy of View and ViewGroup objects. A View usually draws something the user can see and interact with. Whereas a ViewGroup is an invisible container that defines the layout structure for View and other ViewGroup objects. \n\nThe View objects are usually called \"widgets\" and can be one of many subclasses, such as Button or TextView. The ViewGroup objects are usually called \"layouts\" can be one of many types that provide a different layout structure, such as LinearLayout or ConstraintLayout.an Declare UI elements in XML. Android provides a straightforward XML vocabulary that corresponds to the View classes and subclasses, such as those for widgets and layouts. \n\nYou can also use Android Studio\'s Layout Editor to build your XML layout using a drag-and-drop interface. \n\nInstantiate layout elements at runtime. Your app can create View and ViewGroup objects (and manipulate their properties) programmatically. \n\nDeclaring your UI in XML allows you to separate the presentation of your app from the code that controls its behavior. Using XML files also makes it easy to provide different layouts for different screen sizes and orientations (discussed further in Supporting Different Screen Sizes). \n\nThe Android framework gives you the flexibility to use either or both of these methods to build your app\'s UI. For example, you can declare your app\'s default layouts in XML, and then modify the layout at runtime.</string>
</resources>